#include <gtest/gtest.h>
#include <iostream>
#include <stiff/decsol.hpp>

using namespace stiff;

TEST(TestDecSol, TestReal) {
  {
    Matrix<double, 4, 4> mat;
    mat << 0.08823928550576365, 0.4366011322519572, 0.5757622339313386,
        0.179505767165407, 0.36562973885367844, 0.321105147872627,
        0.12186862579281454, 0.8441594970550272, 0.18586006125322818,
        0.8118574391821631, 0.4318675992972878, 0.35344372941325,
        0.646804707626244, 0.5022684089075349, 0.10875331495865792,
        0.07588179485412039;
    Vector<int, 4> ip;
    Vector<double, 4> b;
    b << 0.7238358433172154, 0.0936030851273697, 0.5932736770573785,
        0.21736157039940096;

    int ier = dec(mat, ip);
    sol(mat, b, ip);

    Vector<double, 4> mma_sol;
    mma_sol << 0.033187565435580435, 0.1555058036297453, 1.1754306013433948,
        -0.13233648654772068;

    ASSERT_EQ(ier, 0);
    ASSERT_LE(abs(b(0) - mma_sol(0)) / mma_sol(0), 1e-5);
    ASSERT_LE(abs(b(1) - mma_sol(1)) / mma_sol(1), 1e-5);
    ASSERT_LE(abs(b(2) - mma_sol(2)) / mma_sol(2), 1e-5);
    ASSERT_LE(abs(b(3) - mma_sol(3)) / mma_sol(3), 1e-5);
  }
  {
    Matrix<double, 4, 4> mat;
    mat << 0.3906598222194304, 0.29180478029035184, 0.9136976134133592,
        0.0844650550435071, 0.890014723515246, 0.738455476971625,
        0.9184329943634018, 0.8789587067845854, 0.21177567691416432,
        0.9682895344190974, 0.3489025641606862, 0.7247496424016304,
        0.6277314451386931, 0.3085632473102675, 0.009395156840419583,
        0.0893705901092845;
    Vector<int, 4> ip;
    Vector<double, 4> b;
    b << 0.20545005196667088, 0.5730310628646669, 0.5364149524698127,
        0.5999051625091176;

    int ier = dec(mat, ip);
    sol(mat, b, ip);

    Vector<double, 4> mma_sol;
    mma_sol << 0.6244094151878243, 0.7896099711562888, -0.2598890371078468,
        -0.37214905427041267;

    ASSERT_EQ(ier, 0);
    ASSERT_LE(abs(b(0) - mma_sol(0)) / mma_sol(0), 1e-5);
    ASSERT_LE(abs(b(1) - mma_sol(1)) / mma_sol(1), 1e-5);
    ASSERT_LE(abs(b(2) - mma_sol(2)) / mma_sol(2), 1e-5);
    ASSERT_LE(abs(b(3) - mma_sol(3)) / mma_sol(3), 1e-5);
  }
}

TEST(TestDecSol, TestComplex) {
  Matrix<double, 4, 4> ar;
  Matrix<double, 4, 4> ai;
  ar << 0.1291187697346574, 0.5263424393544771, 0.6033308837455076,
      0.3670062614030687, 0.9430977357532899, 0.762507230664045,
      0.7145949345306861, 0.7770921057984113, 0.10575399094620042,
      0.069697934573834, 0.19213265307498628, 0.38256428505406914,
      0.9901354559781239, 0.1600746717092394, 0.6685239730157391,
      0.6447162257110048;
  ai << 0.5905073004715569, 0.16037802962072378, 0.2910694000563925,
      0.4906556692388433, 0.2223786593267496, 0.20200807206507432,
      0.8817873326905912, 0.6359933395908153, 0.7702649887998638,
      0.8772791717741877, 0.1791398552079, 0.2291355909339532,
      0.43150903046310596, 0.7360954415759553, 0.8697783388724507,
      0.3125387012263443;
  Vector<int, 4> ip;
  Vector<double, 4> br;
  Vector<double, 4> bi;
  br << 0.3393423403452167, 0.20182665745670336, 0.8656865975802763,
      0.4274080017635964;
  bi << 0.9939971813595374, 0.029220142889758494, 0.5826103358333119,
      0.4938184878288683;

  int ier = decc(ar, ai, ip);
  solc(ar, ai, br, bi, ip);

  Vector<double, 4> mma_sol_r;
  Vector<double, 4> mma_sol_i;
  mma_sol_r << 0.9825944718704431, -0.1360222339605851, -0.05684072311075594,
      0.2221481295313641;
  mma_sol_i << -0.3247177137004772, -0.6248893625053191, 1.744544667583715,
      -0.9225331073294023;

  std::cout << br << std::endl;

  ASSERT_EQ(ier, 0);
  ASSERT_LE(abs(br(0) - mma_sol_r(0)) / mma_sol_r(0), 1e-5);
  ASSERT_LE(abs(br(1) - mma_sol_r(1)) / mma_sol_r(1), 1e-5);
  ASSERT_LE(abs(br(2) - mma_sol_r(2)) / mma_sol_r(2), 1e-5);
  ASSERT_LE(abs(br(3) - mma_sol_r(3)) / mma_sol_r(3), 1e-5);

  ASSERT_LE(abs(bi(0) - mma_sol_i(0)) / mma_sol_i(0), 1e-5);
  ASSERT_LE(abs(bi(1) - mma_sol_i(1)) / mma_sol_i(1), 1e-5);
  ASSERT_LE(abs(bi(2) - mma_sol_i(2)) / mma_sol_i(2), 1e-5);
  ASSERT_LE(abs(bi(3) - mma_sol_i(3)) / mma_sol_i(3), 1e-5);
}
